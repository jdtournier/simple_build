#!/bin/bash

function usage {
  cat <<'EOD'

This is a no-frills script to compile and link small C++ projects. It emulates
what a Makefile might do, based on simple assumptions:

- all code files have a `.cpp` suffix (no restrictions for headers)

- all files reside in a flat structure in the same folder

- *user* headers are `#include`d in inverted commas, while *system* headers are
  `#include`d in angled brackets, i.e. like this:

        // when working out dependencies:
        #include "my_header.h"   // <- user header: will be inspected
        #include <iostream>      // <- system header: will be ignored

  This is important if the script is to work out dependencies correctly: it will
  scan through all *user* headers recursively to work out whether each object is
  up to date relative to the headers it depends on, but ignore all *system*
  headers.

#### Invoking the oop_build script

Make sure your working directory is the folder containing your code, then
simply type `oop_build`. The default action is to build the executables (i.e.
compile the .cpp files and link the resulting objects).

The `oop_build` script also accepts these special commands as the first
(non-optional) argument:

- `help`:  print this help page
- `run`:   build and if successful, run the resulting executable, passing any
           remaining arguments to the executable. Note that if the projet
           includes multiple executables, each executable will be invoked in
           turn with the arguments provided.
- `clean`: remove all files (the executable and all objects).

The `oop_build` script also accepts the following options (when used with the
'run' command, these should appear before the 'run' keyword):

- `-debug`:   create code suitable for debugging (best to run `oop_build clean`
              beforehand to clear out any optimised temporaries).
- `-verbose`: print out additional information about what the script is doing,
              including the executables detected, each intermediate file's
              dependencies, whether why each file needs to be updated, and why.

#### Customising the build

If you need to override the default settings (compiler executable, provide
non-default or additional include locations, etc), place those settings in the
`settings.sh` file. An example such file is provided in the
`settings_example.sh`; you can simply copy this file and name it `settings.sh`,
modify as required, and invoke `oop_build` again.

EOD
}






#######################################
# DEFAULT SETTINGS:
#######################################

# set compiler executable:
cxx=g++

# set default C++ language standard:
std=c++20

# default flags for compiling and linking:
# these will be included in all builds (release or debug)
cflags="-Wall"
ldflags=""

# default compiler flags used for optimised build:
# these will be included in addition to cflags/ldflags
cflags_optim="-O2 -DNDEBUG"
ldflags_optim=""

# default compiler flags used for debug build:
# these will be included in addition to cflags/ldflags
cflags_debug="-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -g"
ldflags_debug="-g"

# command to run to display compiler output on error:
display_error="less -X"



#######################################
# START OF SCRIPT PROPER:
#######################################

# terminate script on error:
set -e

run=0
clean=0
verbose=0
targets=()
declare -A deps
declare -A headers
declare -A objects

# load user-specific defaults if present:
if [ -f settings.sh ]; then
  . settings.sh
fi

rm -f build_log.txt



#######################################
# FUNCTIONS
#######################################

report() {
  # print to stderr:
  >&2 echo $@
}


error() {
  # print to stderr and exit:
  >&2 echo ERROR: $@
  exit 1
}

debug() {
  if [ ! $verbose -eq 0 ]; then
    report '#' $@
  fi
}


check_need_update() {
  # check whether target ('dest') is older than its dependencies:
  dest=$1
  shift 1

  debug $dest depends on $@

  # target exists?
  if [ ! -f $dest ]; then
    debug "- $dest does not exist - needs update"
    return 0
  fi

  # target older than dependencies?
  for n in $@; do
    if [ $dest -ot $n ]; then
      debug "- $dest is older than dependency $n - needs update"
      return 0
    fi
  done

  debug "- $dest is already up to date"
  # target is up to date: return non-zero exit code
  return 1
}


compile() {
  # compile cpp file into object
  cmd="$cxx $cflags -std=$std -I. -c $1 -o ${1%.*}.o"
  report "[CC]" $cmd
  if ! $cmd 2> build_log.txt ; then
    $display_error build_log.txt
    return 1
  fi
  [ -s build_log.txt ] && cat build_log.txt || :
}



link() {
  # link objects into executable
  local exe
  exe=$1
  shift
  cmd="$cxx $ldflags $@ -o $exe"
  report "[LD]" $cmd
  if ! $cmd 2> build_log.txt ; then
    $display_error build_log.txt
    return 1
  fi
  [ -s build_log.txt ] && cat build_log.txt || :
}



contains_main() {
  while read line; do
    if [[ "$line" =~ int\ *main\ *\(.*\) ]]; then 
      return 0
    fi
  done < $f
  return 1
}



get_targets() {
  # figure out target executable based on which cpp file contains main():
  [ ${#targets[@]} -gt 0 ] && return;
  shopt -s nullglob
  for f in *.cpp; do
    contains_main $f && targets+=( ${f%.cpp} )
  done
}




not_in_list() {
  match=$1
  shift
  local entry
  for entry in $@; do 
    [ $entry == $match ] && return 1
  done
  return 0
}



list_local_headers() {
  [ -z "${headers[$1]}" ] || return 0
  # list all included local headers:
  # i.e. matching the line '#include "header.h"
  while read line; do
    if [[ "$line" =~ ^\#include\ *\"([^\"]*)\" ]]; then 
      f=${BASH_REMATCH[1]} || :
      [[ -f $f ]] || error "no such header file \"$f\" (included from file \"$1\")"
      not_in_list $f ${headers[$1]} && headers[$1]+="$f " || :
    fi
  done < $1
}



list_dependencies() {
  [ -z "${deps[$1]}" ] || return 0
  # list all dependencies of cpp or h file, including all headers recursively:
  local f
  local h
  list_local_headers $1
  deps[$1]="$1 "
  for f in ${headers[$1]}; do
    not_in_list $f ${deps[$1]} && deps[$1]+="$f " || :
    list_dependencies $f
    for h in ${deps[$f]}; do
      not_in_list $h ${deps[$1]} && deps[$1]+="$h " || :
    done
  done

}



remove_duplicate_objects() {
  local hash
  local entry
  declare -A hash
  for entry in ${objects[$1]}; do hash[$entry]="x"; done
  objects[$1]="${!hash[@]}"
}



scan_deps_for_target() {
  list_dependencies $1
  local entry
  for entry in ${deps[$1]}; do
    if [[ $entry == *.cpp ]]; then
      list_dependencies $entry
      objects[$exe]="${objects[$exe]} $entry"
    else
      cpp=${entry%.*}.cpp
      [[ -f $cpp ]] || continue
      not_in_list $cpp ${objects[$exe]} || continue
      scan_deps_for_target $cpp
    fi
  done
}




#######################################
# CMDLINE PARSING
#######################################

while [ $# -gt 0 ]; do
  case "$1" in
    "help")
      usage
      exit 0
      ;;
    "run")
      shift
      run=1
      break;
      ;;
    "clean")
      clean=1
      ;;
    "-debug")
      cflags_optim="$cflags_debug"
      ldflags_optim="$ldflags_debug"
      ;;
    "-verbose")
      verbose=1
      ;;
    *)
      error "unknown argument \"$1\""
      ;;
  esac
  shift
done

cflags+=" $cflags_optim"
ldflags+=" $ldflags_optim"







#######################################
# MAIN SCRIPT
#######################################

# guess executable names:
get_targets
[ ${#targets[@]} -lt 1 ] && report "WARNING: main() not defined in any cpp file - no executables will be generated"

debug "target executables detected: ${targets[@]}"



# recursive scan of included headers to figure out dependency tree:
for exe in ${targets[@]}; do
  scan_deps_for_target $exe.cpp
  remove_duplicate_objects $exe
done



# compile and link all targets (unless cleaning), 
# and collate list of temporaries for cleaning:
tmplist=""
for exe in ${!objects[@]}; do
  [ -f $exe ] && tmplist+="$exe "
  [ -f $exe.exe ] && tmplist+="$exe.exe "
  objlist=""
  for cpp in ${objects[$exe]}; do 
    f=${cpp%.*}.o
    [ -f $f ] && tmplist+="$f "
    objlist+="$f "
    [ $clean == 0 ] && check_need_update ${cpp%.*}.o ${deps[$cpp]} && compile $cpp
  done
  [ $clean == 0 ] && check_need_update $exe $objlist && link $exe $objlist
done


# if cleaning, remove all temporaries:
if [ $clean == 1 ]; then
  rm -vf $tmplist
  exit 0
fi



# if requested, run command with remaining arguments:
if [ $run -eq 1 ]; then
  for exe in ${targets[@]}; do
    report "[RUN] ./$exe $@"
    report "----------------------------------------------"
    ./$exe $@
    report "----------------------------------------------"
  done
fi

