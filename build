#!/bin/bash

function usage {
  cat <<'EOD'

This is a no-frills script to compile and link small C++ projects. It emulates
what a Makefile might do, based on simple assumptions:

- all code files have a `.cpp` suffix (no restrictions for headers)

- all files reside in a flat structure in the same folder

- *user* headers are `#include`d in inverted commas, while *system* headers are
  `#include`d in angled brackets, i.e. like this:

        // when working out dependencies:
        #include "my_header.h"   // <- user header: will be inspected
        #include <iostream>      // <- system header: will be ignored

  This is important if the script is to work out dependencies correctly: it will
  scan through all *user* headers recursively to work out whether each object is
  up to date relative to the headers it depends on, but ignore all *system*
  headers.

#### Invoking the oop_build script

Make sure your working directory is the folder containing your code, then
simply type `oop_build`. The default action is to build the executables (i.e.
compile the .cpp files and link the resulting objects).

The `oop_build` script also accepts these special commands as the first
(non-optional) argument:

- `help`:  print this help page
- `run`:   build and if successful, run the resulting executable, passing any
           remaining arguments to the executable (only useful if project contains
           a single executable).
- `clean`: remove all files (the executable and all objects).

The `oop_build` script also accepts the following options (when used with the
'run' command, these should appear before the 'run' keyword):

- `-debug`:   create code suitable for debugging (best to run `oop_build clean`
              beforehand to clear out any optimised temporaries).
- `-verbose`: print out additional information about what the script is doing,
              including the executables detected, each intermediate file's
              dependencies, whether why each file needs to be updated, and why.

#### Customising the build

If you need to override the default settings (compiler executable, provide
non-default or additional include locations, etc), place those settings in the
`settings.sh` file. An example such file is provided in the
`settings_example.sh`; you can simply copy this file and name it `settings.sh`,
modify as required, and invoke `oop_build` again.

EOD
}






#######################################
# DEFAULT SETTINGS:
#######################################

# set compiler executable:
cxx=g++

# set default C++ language standard:
std=c++20

# default flags for compiling and linking:
# these will be included in all builds (release or debug)
cflags="-Wall"
ldflags=""

# default compiler flags used for optimised build:
# these will be included in addition to cflags/ldflags
cflags_optim="-O2 -DNDEBUG"
ldflags_optim=""

# default compiler flags used for debug build:
# these will be included in addition to cflags/ldflags
cflags_debug="-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -g"
ldflags_debug="-g"

# command to run to display compiler output on error:
display_error="less -X"



#######################################
# START OF SCRIPT PROPER:
#######################################

# terminate script on error:
set -e

run=0
verbose=0

# load user-specific defaults if present:
if [ -f settings.sh ]; then
  . settings.sh
fi

rm -f build_log.txt



#######################################
# FUNCTIONS
#######################################

report() {
  # print to stderr:
  >&2 echo $@
}


error() {
  # print to stderr and exit:
  >&2 echo ERROR: $@
  exit 1
}

debug() {
  if [ ! $verbose -eq 0 ]; then
    report '#' $@
  fi
}


check_need_update() {
  # check whether target ('dest') is older than its dependencies:
  dest=$1
  shift 1

  debug $dest depends on $@

  # target exists?
  if [ ! -f $dest ]; then
    debug $dest does not exist - needs update
    return 0
  fi

  # target older than dependencies?
  for n in $@; do
    if [ $dest -ot $n ]; then
      debug $dest is older than dependency $n - needs update
      return 0
    fi
  done

  debug $dest is already up to date
  # target is up to date: return non-zero exit code
  return 1
}


compile() {
  # compile cpp file into object
  cmd="$cxx $cflags -std=$std -I. -c $1 -o ${1%.*}.o"
  report "[CC]" $cmd
  if ! $cmd 2> build_log.txt ; then
    $display_error build_log.txt
    return 1
  fi
  [ -s build_log.txt ] && cat build_log.txt || :
}



link() {
  # link objects into executable
  exe=$1
  shift
  cmd="$cxx $ldflags $@ -o $exe"
  report "[LD]" $cmd
  if ! $cmd 2> build_log.txt ; then
    $display_error build_log.txt
    return 1
  fi
  [ -s build_log.txt ] && cat build_log.txt || :
}



list_cpp_with_main() {
  for f in *.cpp; do
    while read line; do
      if [[ "$line" =~ int\ *main\ *\(.*\) ]]; then 
        echo "$f"
        break
      fi
    done < $f
  done
}

get_executable_names() {
  # figure out target executable based on which cpp file contains main():
  exe=( $(list_cpp_with_main) )
  [ ${#exe[@]} -lt 1 ] && report "WARNING: main() not defined in any cpp file - no executables will be generated"

  for f in ${exe[@]}; do
    echo -n "${f%.cpp} "
  done
  echo ""
}

contains() {
  tocheck=$1
  shift
  for entry in $@; do
    [ $entry == $tocheck ] && return 0
  done
  return 1
}



list_local_headers() {
  # list all included local headers:
  # i.e. matching the line '#include "header.h"
  while read line; do
    if [[ "$line" =~ ^\#include\ *\"([^\"]*)\"  ]]; then 
      header=${BASH_REMATCH[1]} || :
      [[ -f $header ]] || error "no such header file \"$header\" (included from file \"$1\")"
      echo $header
    fi
  done < $1
}


not_in_list() {
  match=$1
  shift
  for entry in $@; do 
    [ $entry == $match ] && return 1
  done
  return 0
}


list_dependencies() {
  # list all dependencies of cpp or h file, including all headers recursively:
  headers=$(list_local_headers $1) || return 1;
  list="$@ $headers"
  #echo $1 ':' $@ ' -- ' $headers 1>&2
  for f in $headers; do
    not_in_list $f $@ && { list=$(list_dependencies $f $list) || return 1; }
  done
  # sort and remove duplicates:
  declare -A hash
  for entry in $list; do
    hash[$entry]=$entry
  done
  
  echo ${hash[@]}
}



recursive_update() {
  deps=$(list_dependencies $1) || return 1;
  obj=""
  for entry in $deps; do
    if [[ $entry == *.cpp ]]; then
      echo -n "${entry%.*}.o "
      cpp_dep=$(list_dependencies $entry) || return 1;
      check_need_update ${entry%.*}.o $cpp_dep || continue
      compile $entry
    else
      cpp=${entry%.*}.cpp
      [[ -f $cpp ]] || continue
      recursive_update $cpp
    fi
  done
}


list_temporaries() {
  for f in $(get_executable_names); do
    [ -f $f ] && echo $f
  done
  find . -name '*.o'
}


#######################################
# CMDLINE PARSING
#######################################

while [ $# -gt 0 ]; do
  case "$1" in
    "help")
      usage
      exit 0
      ;;
    "run")
      shift
      run=1
      break;
      ;;
    "clean")
      rm -vf $(list_temporaries)
      exit 0
      ;;
    "-debug")
      cflags_optim="$cflags_debug"
      ldflags_optim="$ldflags_debug"
      ;;
    "-verbose")
      verbose=1
      ;;
    *)
      error "unknown argument \"$1\""
      ;;
  esac
  shift
done

cflags="$cflags $cflags_optim"
ldflags="$ldflags $ldflags_optim"


if ! ls *.cpp >/dev/null 2>&1; then
  cat <<'EOD'

ERROR: no *.cpp files found in current folder!

Type `oop_build help` for detailed usage

EOD
  exit 1
fi


#######################################
# MAIN SCRIPT
#######################################

# guess executable names:
targets=$(get_executable_names)
debug "target executables detected: $targets"

for exe in $targets; do
  objects=$(recursive_update $exe.cpp)
  check_need_update $exe $objects || continue
  link $exe $objects
done



# if requested, run command with remaining arguments:
if [ $run -eq 1 ]; then
  exe=( $targets )
  [ ${#exe[@]} == 1 ] || { echo ERROR: too many executables for -run option; exit 1; }
  echo "[RUN] ./${exe[0]} $@"
  echo "----------------------------------------------"
  ./${exe[0]} "$@"
fi

